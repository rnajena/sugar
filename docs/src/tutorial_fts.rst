Sequence features
=================

Sequence features, respective annotations,
can be handled with the `.Feature` and `.FeatureList` classes.
To read features use the `.read_fts()` routine.
It has the same gimmicks as the sequence `.read()` function.
To write features use the `.FeatureList.write()` method.
The following feature formats are supported out of the box:

.. include:: autogenerated_format_table_fts.rst

The following example loads a BLAST file and writes the locations to a GFF file::

    >>> from sugar import read_fts
    >>> fts = read_fts('hits.blastn')
    >>> fts.write('blast_hits.gff')

.. rubric:: A longer example

Another longer example is presented which uses the example GFF file included in the package.
Printing a FeatureList shows lines as following::

    {type} {start}{strand} {len} {meta}

.. note::
    Location positions are Python-like 0-based numbers.

.. runblock:: pycon

    >>> from sugar import read_fts
    >>> fts = read_fts()
    >>> print(fts)
    >>> print(fts[:2])  # Select first two features
    >>> print(fts.select('exon'))  # Select the features of type exon
    >>> print(fts.filter(type_in=('mRNA', 'CDS')))  # Select the features of type mRNA and CDS
    >>> print(fts.sort(len)[:5])  # Sort by length (in-place operation)
    >>> slfts = fts.slice(50_000, 80_000)  # Slice the features
    >>> print(slfts)                       # features might have defects afterwards
    >>> print(slfts.select('region')[0].loc)  # Show the first location of the region feature
    >>> slfts.select('region')[0].loc.defect

The `.FeatureList.tolists()`, `~.FeatureList.topandas()` and `~.FeatureList.frompandas()` methods
can be handy in some cases:

.. runblock:: pycon

    >>> from sugar import read_fts
    >>> fts = read_fts().select('cDNA_match')
    >>> for record in fts.tolists('type start strand len'):
    ...     print(record)

    >>> print(fts.topandas())

Please also see the advanced example in the :doc:`Sequences Tutorial <tutorial_seqs>`.


.. rubric:: Datamodel of the ``FeatureList`` and ``Feature`` classes

.. figure:: _static/datamodel_fts.svg
   :align: center
   :figclass: only-light
   :width: 90%


.. figure:: _static/datamodel_fts_dark.svg
   :align: center
   :figclass: only-dark
   :width: 90%

Attributes marked with a star are directly accessible from the feature object.